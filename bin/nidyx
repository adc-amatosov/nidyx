#!/usr/bin/env ruby

require "optparse"
require "json"
require "nidyx"
require "nidyx/version"
require "nidyx/generator"

###
# help text
###

BANNER = <<END
usage: nidyx [-h | --help] [--version]
       nidyx <schema> <class-prefix> [output-directory] [-j | --json-model]
             [-a | --author] [-c | --company] [-p | --project]

END

DESC = <<END

nidyx generates plain Objective-C models from JSON Schema. That's pretty much
it. Oh yeah, it also supports generating with JSONModel support! Pretty rad.

example:

  $ nidyx example.json.schema ClassPrefix /path/to/output/directory

END

###
# option parsing
###

options = {}

opts = OptionParser.new do |o|
  o.banner = BANNER

  o.on("-j", "--json-model", "Generate with JSONModel support") do |j|
    options[:json_model] = j
  end

  o.on("-a", "--author NAME", "Author's name") do |a|
    options[:author] = a
  end

  o.on("-c", "--company COMPANY", "Company's name") do |c|
    options[:company] = c
  end

  o.on("-p", "--project PROJECT", "Project's name") do |p|
    options[:project] = p
  end

  o.on("--version", "Show version") do
    puts Nidyx::VERSION
    exit
  end

  o.separator DESC
end

begin
  opts.parse!
rescue OptionParser::InvalidOption => e
  puts e
  exit 1
end

if ARGV.size < 2
  puts "Too few arguments." unless ARGV.empty?
  puts opts
  exit
end

###
# generator
###

begin
  # TODO: validate this is legitimate JSON Schema
  schema = JSON.parse(IO.read(ARGV[0]))
rescue JSON::JSONError
  puts "Invalid JSON read from #{ARGV[0]}"
  exit 1
end

gen = Nidyx::Generator.new(ARGV[1], ARGV[2], options)
gen.spawn(schema)
