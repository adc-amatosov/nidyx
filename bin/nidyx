#!/usr/bin/env ruby

require "optparse"
require "nidyx"
require "nidyx/version"
require "nidyx/generator"

###
# help text
###

BANNER = <<END
usage: nidyx [-h] [--version]
       nidyx <schema> <class-prefix>
             [-n] [-a author] [-c company] [-p project] [-o directory]
             [--json-model] # objc specific

END

DESC = <<END

Nidyx generates plain Objective-C models from JSON Schema. It can also generate
models with JSONModel support.

Examples
========

Bare minimum. Given a schema and a class prefix, generate models in the
current directory:

  $ nidyx example.json.schema ClassPrefix

Specify an ouput directory:

  $ nidyx example.json.schema ClassPrefix -o /path/to/output/directory

Generate models with JSONModel support and optional documentation:

  $ nidyx example.json.schema ClassPrefix -o /path/to/output/directory \\
    --json-model -a "Your Name" -c "Company Name" -p "Project Name"

END

###
# option parsing
###

# defaults
options = {
  :comments => true,
  :platform => "objc",
  :objc => {
    :json_model => false
  }
}

opts = OptionParser.new do |o|
  o.banner = BANNER

  # general generation options
  o.on("-a", "--author AUTHOR", "Author's name") do |author|
    options[:author] = author
  end
  o.on("-c", "--company COMPANY", "Company's name") do |company|
    options[:company] = company
  end
  o.on("-p", "--project PROJECT", "Project's name") do |project|
    options[:project] = project
  end
  o.on("-o", "--output DIRECTORY", "Output models to a specific directory") do |output_directory|
    options[:output_directory] = output_directory
  end
  o.on("-n", "--no-comments", "Generate without header comments") do
    options[:comments] = false
  end

  # objc generation options
  o.on("--json-model", "Generate with JSONModel support") do
    options[:objc][:json_model] = true
  end

  # other
  o.on("-h", "--help", "Print usage information") do
    puts o
    exit
  end
  o.on("--version", "Print version") do
    puts Nidyx::VERSION
    exit
  end

  o.separator DESC
end

begin
  opts.parse!
rescue OptionParser::InvalidOption => e
  puts e
  puts opts
  exit 1
end

if ARGV.size < 2
  puts "Too few arguments." unless ARGV.empty?
  puts opts
  exit 1
end

###
# run
###

Nidyx::Generator.run(ARGV[0], ARGV[1], options)
